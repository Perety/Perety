  <!doctype html>
  <html lang="es">
  <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>PDA Wizard RP — Simulador (Online, single file)</title>
  <style>
    /* ===== Theme & layout ===== */
    :root{
      --bg:#071018; --card:#0e2633; --muted:#98a8b0; --accent:#f7b731; --accent-2:#7c3aed;
      --danger:#ff4d4f; --glass: rgba(255,255,255,0.03);
      --radius:12px;
      font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;background:
        radial-gradient(800px 300px at 8% 10%, rgba(124,58,237,0.05), transparent),
        linear-gradient(180deg, #03121a 0%, var(--bg) 60%);
      color:#e6eef3; -webkit-font-smoothing:antialiased;
    }
    .wrap{max-width:1180px;margin:18px auto;padding:18px;display:grid;grid-template-rows:auto 1fr;gap:14px}
    header{display:flex;align-items:center;justify-content:space-between;gap:12px}
    .brand{display:flex;gap:12px;align-items:center}
    .logo{width:56px;height:56px;border-radius:12px;background:linear-gradient(135deg,var(--accent),var(--accent-2));display:flex;align-items:center;justify-content:center;font-weight:900;color:#041018}
    h1{margin:0;font-size:18px}
    .subtitle{color:var(--muted);font-size:13px}
    .top-right{display:flex;gap:8px;align-items:center}
    .pill{background:rgba(255,255,255,0.03);padding:8px 10px;border-radius:999px;font-weight:700}
    .small{font-size:12px;color:var(--muted)}
    .btn{background:var(--accent);color:#041018;padding:8px 12px;border-radius:10px;border:none;cursor:pointer;font-weight:800}
    .btn-ghost{background:transparent;border:1px solid rgba(255,255,255,0.04);color:var(--muted);padding:7px 10px;border-radius:10px;cursor:pointer}
    /* grid of cards */
    .grid{display:grid;grid-template-columns:repeat(3,1fr);gap:14px}
    .card{
      background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:var(--radius);padding:18px;border:1px solid rgba(255,255,255,0.03);box-shadow:0 10px 30px rgba(2,6,10,0.6);
      cursor:pointer;overflow:hidden;position:relative;transition:transform .28s, box-shadow .28s;
      display:flex;flex-direction:column;gap:12px;min-height:120px;
    }
    .card:hover{transform:translateY(-8px);box-shadow:0 18px 40px rgba(2,6,10,0.75)}
    .card .title{font-weight:900;font-size:16px}
    .card .desc{color:var(--muted);font-size:13px}
    .card .cta{margin-top:auto;display:flex;justify-content:space-between;align-items:center}
    .icon {
      width:56px;height:56px;border-radius:10px;background:linear-gradient(135deg,rgba(255,255,255,0.03),rgba(255,255,255,0.01));
      display:flex;align-items:center;justify-content:center;font-weight:900;font-size:20px;
      transition:transform .35s;
    }
    .card:hover .icon{transform:rotate(8deg) scale(1.06)}
    .expanded{margin-top:14px;border-radius:var(--radius);padding:18px;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border:1px solid rgba(255,255,255,0.03)}
    .form-row{display:flex;gap:8px}
    input, textarea, select{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:inherit}
    textarea{min-height:100px;resize:vertical}
    .list{display:flex;flex-direction:column;gap:10px}
    .item{padding:10px;border-radius:10px;background:var(--glass);display:flex;justify-content:space-between;align-items:center}
    .muted{color:var(--muted)}
    .danger{background:linear-gradient(90deg,#ff8a80,#ff5252);color:#041018;padding:6px 8px;border-radius:8px}
    .ok{background:linear-gradient(90deg,#48c774,#34d399);color:#041018;padding:6px 8px;border-radius:8px}
    .tiny{font-size:12px}
    footer{margin-top:18px;text-align:center;color:var(--muted);font-size:13px}
    /* modal */
    .overlay{position:fixed;inset:0;background:linear-gradient(rgba(2,6,10,0.6),rgba(2,6,10,0.8));display:flex;align-items:center;justify-content:center;z-index:9999}
    .modal{width:520px;max-width:94%;background:linear-gradient(180deg,#071729,#061421);padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.03)}
    .link-like{color:var(--accent);cursor:pointer;text-decoration:underline}
    /* responsive */
    @media (max-width:980px){ .grid{grid-template-columns:repeat(2,1fr)} }
    @media (max-width:640px){ .grid{grid-template-columns:1fr} .form-row{flex-direction:column} }
    /* micro animations */
    .fade-in{animation:fadeIn .36s ease both}
    @keyframes fadeIn{from{opacity:0;transform:translateY(8px)}to{opacity:1;transform:none}}
    .btn-small{padding:6px 8px;font-size:13px;border-radius:8px}
    .search{display:flex;gap:8px;align-items:center}
  </style>
  </head>
  <body>
    <div class="wrap">
      <header>
        <div class="brand">
          <div class="logo">PDA</div>
          <div>
            <h1>PDA / CAD — Wizard RP</h1>
            <div class="subtitle">Simulador offline — comparte el index.html</div>
          </div>
        </div>

        <div class="top-right">
          <div class="pill small" id="userDisplay">No conectado</div>
          <div class="pill small" id="dutyStatus">En servicio: 0</div>
          <button id="btnExport" class="btn">Exportar</button>
          <button id="btnLogin" class="btn-ghost">Iniciar sesión</button>
        </div>
      </header>

      <!-- Grid of main action cards -->
      <section class="grid fade-in" id="cardsRoot"></section>

      <!-- Expanded panel -->
      <div id="expandedRoot"></div>

      <footer>Hecho para roleplay • Datos persistidos en localStorage • Comparte el archivo index.html</footer>
    </div>

    <!-- Login / Register modal (mantiene tu sistema original) -->
    <div id="loginModal" class="overlay" style="display:none">
      <div class="modal">
        <h3>Entrar / Registrarse</h3>
        <div class="muted small">Accede con tu cuenta o crea una. Los datos se guardan localmente.</div>

        <div style="margin-top:12px">
          <label class="muted small">Usuario</label>
          <input id="loginUser" placeholder="usuario (ej: perety04)"/>
          <label class="muted small" style="margin-top:8px">Contraseña</label>
          <input id="loginPass" type="password" placeholder="contraseña"/>
          <div style="display:flex;gap:8px;margin-top:12px">
            <button id="loginBtn" class="btn">Entrar</button>
            <button id="guestBtn" class="btn-ghost">Invitado</button>
            <div style="margin-left:auto" class="small muted">¿Sin cuenta? <span id="showReg" class="link-like">Crear</span></div>
          </div>
          <div id="loginError" class="muted small" style="margin-top:8px;color:#ff9b9b;display:none"></div>
        </div>

        <div id="registerBlock" style="display:none;margin-top:12px;border-top:1px dashed rgba(255,255,255,0.03);padding-top:12px">
          <h4 style="margin:0 0 8px 0">Crear cuenta</h4>
          <label class="muted small">Nombre visible</label>
          <input id="regName" placeholder="Ej: Ofc. Perez"/>
          <label class="muted small">Usuario</label>
          <input id="regUser" placeholder="usuario (ej: perety04)"/>
          <label class="muted small">Contraseña</label>
          <input id="regPass" type="password" placeholder="contraseña"/>
          <div style="display:flex;gap:8px;margin-top:8px">
            <select id="regRole">
              <option value="officer">Officer</option>
              <option value="sergeant">Sergeant</option>
              <option value="dispatcher">Dispatcher</option>
              <option value="admin">Admin</option>
            </select>
            <button id="regCreate" class="btn">Crear</button>
            <button id="regCancel" class="btn-ghost">Cancelar</button>
          </div>
          <div id="regMsg" class="muted small" style="margin-top:8px"></div>
        </div>
      </div>
    </div>

  <script>
  /* ===== Single-file PDA simulator (offline, localStorage) =====
     Mantiene tu sistema de login/registro original en modal.
     Añade: multiusuarios, contador de policías en servicio, asignación/borrado avanzado,
     administración con roles, plantillas, historial, export/import.
  */

  /* ---------- Storage helpers ---------- */
  const PREFIX = 'pda_v2_';
  function lsGet(k, fallback){ try{const v=localStorage.getItem(PREFIX+k); return v?JSON.parse(v):fallback;}catch(e){return fallback} }
  function lsSet(k,v){ try{ localStorage.setItem(PREFIX+k, JSON.stringify(v)) }catch(e){} }
  function lsRm(k){ try{ localStorage.removeItem(PREFIX+k) }catch(e){} }

  /* ---------- Utility ---------- */
  function uid(prefix='id'){ return prefix + '_' + Math.random().toString(36).slice(2,9); }
  function now(){ return Date.now(); }
  function pushLog(msg){ const logs = lsGet('logs', []); logs.unshift({id:uid('log'), t:now(), msg}); lsSet('logs', logs); renderLogsMini(); }

  /* ---------- Initial seed data (if first run) ---------- */
  function seedIfNeeded(){
    if(!lsGet('inited', false)){
      const users = [
        {id:uid('u'), username:'admin', display:'Admin', badge:'ADM-001', password:'admin123', role:'admin'},
        {id:uid('u'), username:'disp', display:'Dispatch', badge:'DISP', password:'dispatch', role:'dispatcher'},
        {id:uid('u'), username:'sarg', display:'Sgt. Vega', badge:'PD-007', password:'vega', role:'sergeant'},
        {id:uid('u'), username:'perety04', display:'Perety 04', badge:'PD-314', password:'peretypass', role:'officer'}
      ];
      const reports = [
        {id:uid('rep'), title:'Robo tienda 24/7', description:'Sospechoso armado en tienda. Testigos en escena.', author:'Admin', created_at:Date.now()-3600*1000}
      ];
      const wanted = [
        {id:uid('w'), name:'Mario "El Rata"', description:'Robo de vehículo', bounty:500, created_at:Date.now()-5000}
      ];
      const calls = [
        {id:uid('c'), caller:'Civ. Morales', message:'Disparo en el puerto', status:'pending', assigned_to:null, created_at:Date.now()-2000}
      ];
      const fines = [
        {id:uid('f'), offender:'Vehículo - LSF-021', amount:200, reason:'Exceso de velocidad', author:'Sgt. Vega', created_at:Date.now()-8000}
      ];
      const templates = {
        report: "Título: {{title}}\\nHechos: {{facts}}\\nAcciones: {{actions}}\\nOficial: {{author}}",
        bolo: "Nombre: {{name}}\\nDescripción: {{description}}\\nRecompensa: {{bounty}}",
        fine: "Multa para: {{offender}}\\nImporte: {{amount}}\\nMotivo: {{reason}}\\nOficial: {{author}}",
        call: "Remitente: {{caller}}\\nMensaje: {{message}}\\nUbicación: {{location}}"
      };
      lsSet('users', users);
      lsSet('reports', reports);
      lsSet('wanted', wanted);
      lsSet('calls', calls);
      lsSet('fines', fines);
      lsSet('templates', templates);
      lsSet('logs', [{id:uid('log'), t:now(), msg:'Seed inicial creada'}]);
      lsSet('onDuty', {}); // mapa id->bool
      lsSet('inited', true);
    }
  }

  /* ---------- App state (runtime) ---------- */
  let STATE = {
    currentUser: lsGet('currentUser', null),
    expanded: null
  };

  /* ---------- DOM refs ---------- */
  const cardsRoot = document.getElementById('cardsRoot');
  const expandedRoot = document.getElementById('expandedRoot');
  const userDisplay = document.getElementById('userDisplay');
  const dutyStatus = document.getElementById('dutyStatus');
  const loginModal = document.getElementById('loginModal');
  const btnLogin = document.getElementById('btnLogin');
  const btnExport = document.getElementById('btnExport');

  /* ---------- Permissions matrix ---------- */
  const ROLES = ['guest','officer','sergeant','dispatcher','admin'];
  const PERMS = {
    create_report: ['officer','sergeant','dispatcher','admin'],
    view_reports: ['guest','officer','sergeant','dispatcher','admin'],
    create_bolo: ['officer','sergeant','dispatcher','admin'],
    manage_wanted: ['sergeant','dispatcher','admin'],
    create_fine: ['officer','sergeant','admin'],
    create_call: ['guest','officer','sergeant','dispatcher','admin'],
    assign_call: ['dispatcher','sergeant','admin'],
    view_calls: ['officer','sergeant','dispatcher','admin'],
    manage_users: ['admin'],
    export: ['admin','dispatcher','sergeant']
  };
  function can(action){
    if(!STATE.currentUser) return action === 'create_call' ? true : false; // guests can create calls
    return PERMS[action] ? PERMS[action].includes(STATE.currentUser.role) : false;
  }

  /* ---------- Cards (main UI) ---------- */
  const CARDS = [
    {id:'pda', title:'PDA / Lookup', desc:'Buscar personas, placas y fichas', icon:'🔍'},
    {id:'calls', title:'Dispatch / Llamadas', desc:'Crear/Asignar llamadas 911', icon:'📞'},
    {id:'reports', title:'Informes', desc:'Crear informes oficiales', icon:'📑'},
    {id:'wanted', title:'BOLO / Wanted', desc:'Fichas de buscados', icon:'🚨'},
    {id:'fines', title:'Multas', desc:'Generar sanciones', icon:'💸'},
    {id:'service', title:'Servicio', desc:'Ponerse en servicio / Fuera', icon:'🟢'},
    {id:'admin', title:'Administración', desc:'Usuarios y roles (admin)', icon:'⚙️'},
    {id:'logs', title:'Auditoría', desc:'Historial de acciones', icon:'📜'},
    {id:'tools', title:'Herramientas', desc:'Exportar / Importar datos', icon:'🧰'}
  ];

  function renderCards(){
    cardsRoot.innerHTML = '';
    CARDS.forEach(c=>{
      const el = document.createElement('div'); el.className='card';
      el.dataset.id = c.id;
      el.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
        <div><div class="title">${c.title}</div><div class="desc">${c.desc}</div></div>
        <div class="icon">${c.icon}</div>
      </div>
      <div class="cta"><div class="muted tiny">Acción rápida</div><button class="btn-small btn" data-open="${c.id}">Abrir</button></div>`;
      el.querySelector('button[data-open]').onclick = (e)=>{ e.stopPropagation(); openCard(c.id); };
      el.onclick = ()=> openCard(c.id);
      cardsRoot.appendChild(el);
    });
  }

  /* ---------- Open card => render expanded content ---------- */
  function openCard(id){
    STATE.expanded = id;
    expandedRoot.innerHTML = '';
    const panel = document.createElement('div'); panel.className='expanded fade-in';
    if(id==='pda') renderPDA(panel);
    else if(id==='calls') renderCalls(panel);
    else if(id==='reports') renderReports(panel);
    else if(id==='wanted') renderWanted(panel);
    else if(id==='fines') renderFines(panel);
    else if(id==='service') renderService(panel);
    else if(id==='admin') renderAdmin(panel);
    else if(id==='logs') renderLogs(panel);
    else if(id==='tools') renderTools(panel);
    expandedRoot.appendChild(panel);
    window.scrollTo({ top: panel.offsetTop-20, behavior:'smooth' });
  }

  /* ---------- PDA (Lookup) ---------- */
  function renderPDA(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>PDA / Lookup</strong><div class="muted small">Buscar personas, usuarios y placas</div></div>
      <div><button class="btn btn-small" id="closeX">Cerrar</button></div>
    </div>
    <div style="margin-top:12px;display:flex;gap:8px;align-items:center">
      <input id="pdaQ" placeholder="Buscar por nombre, usuario o placa..." />
      <button id="pdaSearch" class="btn">Buscar</button>
    </div>
    <div id="pdaRes" style="margin-top:12px"></div>`;
    container.querySelector('#closeX').onclick = ()=> closeExpanded();
    container.querySelector('#pdaSearch').onclick = pdaSearch;
    container.querySelector('#pdaQ').onkeypress = (e)=>{ if(e.key==='Enter') pdaSearch(); };
    renderPDASamples();
  }
  function pdaSearch(){
    const q = document.getElementById('pdaQ').value.trim().toLowerCase();
    const res = document.getElementById('pdaRes');
    res.innerHTML = '<div class="muted small">Buscando...</div>';
    setTimeout(()=>{
      const users = lsGet('users', []);
      const wanted = lsGet('wanted', []);
      const reports = lsGet('reports', []);
      const byUser = users.filter(u => (u.display||u.username).toLowerCase().includes(q) || u.username.toLowerCase().includes(q));
      const byWanted = wanted.filter(w => (w.name||'').toLowerCase().includes(q) || (w.description||'').toLowerCase().includes(q));
      const byReport = reports.filter(r => (r.title||'').toLowerCase().includes(q) || (r.description||'').toLowerCase().includes(q));
      res.innerHTML = '';
      if(byUser.length){
        const h = document.createElement('div'); h.innerHTML='<div class="muted small">Usuarios</div>'; res.appendChild(h);
        byUser.forEach(u=>{ const it = document.createElement('div'); it.className='item'; it.innerHTML = `<div><div style="font-weight:700">${u.display} (${u.username})</div><div class="muted small">${u.badge||''} • ${u.role}</div></div><div><button class="btn-ghost btn-small" data-u="${u.username}">Ver</button></div>`; it.querySelector('button').onclick=()=> modalAlert('Usuario', JSON.stringify(u,null,2)); res.appendChild(it); });
      }
      if(byWanted.length){
        const h = document.createElement('div'); h.innerHTML='<div class="muted small" style="margin-top:8px">Wanted</div>'; res.appendChild(h);
        byWanted.forEach(w=>{ const it = document.createElement('div'); it.className='item'; it.innerHTML = `<div><div style="font-weight:700">${w.name}</div><div class="muted small">${w.description}</div></div><div class="pill">${w.bounty||0}€</div>`; res.appendChild(it); });
      }
      if(byReport.length){
        const h = document.createElement('div'); h.innerHTML='<div class="muted small" style="margin-top:8px">Informes</div>'; res.appendChild(h);
        byReport.forEach(r=>{ const it = document.createElement('div'); it.className='item'; it.innerHTML = `<div><div style="font-weight:700">${r.title}</div><div class="muted small">${(r.description||'').slice(0,120)}</div></div><div class="muted tiny">${new Date(r.created_at).toLocaleString()}</div>`; res.appendChild(it); });
      }
      if(!byUser.length && !byWanted.length && !byReport.length){
        res.innerHTML = '<div class="muted small">No hay resultados</div>';
      }
    }, 220);
  }
  function renderPDASamples(){
    const tmpl = lsGet('templates', {});
    const res = document.getElementById('pdaRes');
    if(res.innerHTML.trim()==='') res.innerHTML = `<div class="muted small">Introduce un término y pulsa "Buscar". Plantilla report: <code>${(tmpl.report||'').slice(0,60)}...</code></div>`;
  }

  /* ---------- Calls (Dispatch) ---------- */
  function renderCalls(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Dispatch / Llamadas</strong><div class="muted small">Crear llamadas y asignar unidades</div></div>
      <div><button class="btn btn-small" id="closeC">Cerrar</button></div>
    </div>
    <div style="margin-top:12px;display:flex;gap:8px">
      <input id="callFrom" placeholder="Remitente (opcional)"/>
      <input id="callMsg" placeholder="Mensaje"/>
      <button id="callCreate" class="btn">Crear llamada</button>
    </div>
    <div style="margin-top:12px"><strong>Llamadas</strong><div id="callsList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeC').onclick = ()=> closeExpanded();
    container.querySelector('#callCreate').onclick = createCall;
    loadCalls();
  }
  function createCall(){
    const caller = document.getElementById('callFrom').value.trim() || 'Anonimo';
    const message = document.getElementById('callMsg').value.trim();
    if(!message){ modalAlert('Error', 'Introduce un mensaje'); return; }
    const calls = lsGet('calls', []);
    const c = {id:uid('c'), caller, message, status:'pending', assigned_to:null, created_at:now()};
    calls.unshift(c); lsSet('calls', calls); pushLog(`Llamada creada por ${caller}`);
    document.getElementById('callMsg').value=''; document.getElementById('callFrom').value='';
    loadCalls();
  }
  function loadCalls(){
    const list = document.getElementById('callsList'); if(!list) return;
    const calls = lsGet('calls', []);
    list.innerHTML = '';
    if(!calls.length){ list.innerHTML = '<div class="muted small">No hay llamadas</div>'; return; }
    calls.forEach(c=>{
      const it = document.createElement('div'); it.className='item';
      const assignee = c.assigned_to ? (lsGet('users',[]).find(u=>u.id===c.assigned_to)?.display || '—') : '—';
      it.innerHTML = `<div style="flex:1"><div style="font-weight:700">${c.caller}</div><div class="muted small">${c.message}</div></div>
        <div style="text-align:right"><div class="muted tiny">${new Date(c.created_at).toLocaleString()}</div><div style="margin-top:8px"><div class="muted small">Asig: ${assignee}</div></div></div>`;
      const btns = document.createElement('div'); btns.style.marginLeft='12px';
      if(can('assign_call') && STATE.currentUser){
        const assign = document.createElement('button'); assign.className='btn-small btn-ghost'; assign.textContent='Asignar a mí';
        assign.onclick = ()=>{ assignCall(c.id); };
        btns.appendChild(assign);
      }
      if(STATE.currentUser && (STATE.currentUser.role==='admin' || (c.assigned_to && STATE.currentUser.id===c.assigned_to))){
        const del = document.createElement('button'); del.className='btn-small'; del.style.marginLeft='6px'; del.textContent='Borrar'; del.onclick=()=>{ if(confirm('Borrar llamada?')){ deleteCall(c.id); } };
        btns.appendChild(del);
      }
      it.appendChild(btns);
      list.appendChild(it);
    });
  }
  function assignCall(id){
    if(!STATE.currentUser){ modalAlert('Error', 'Inicia sesión para asignar'); return; }
    const calls = lsGet('calls', []);
    const c = calls.find(x=>x.id===id);
    if(!c) return;
    c.status='assigned'; c.assigned_to = STATE.currentUser.id;
    lsSet('calls', calls); pushLog(`Llamada ${id} asignada a ${STATE.currentUser.display}`);
    loadCalls();
  }
  function deleteCall(id){
    let calls = lsGet('calls', []);
    calls = calls.filter(c=>c.id!==id);
    lsSet('calls', calls); pushLog(`Llamada ${id} borrada`);
    loadCalls();
  }

  /* ---------- Reports (Informes) ---------- */
  function renderReports(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Informes</strong><div class="muted small">Crear y consultar informes</div></div>
      <div><button class="btn btn-small" id="closeR">Cerrar</button></div>
    </div>
    <div style="margin-top:12px">
      <div class="muted small">Plantilla actual (editable)</div>
      <textarea id="tplReport" style="min-height:80px"></textarea>
    </div>
    <div style="margin-top:8px" class="form-row">
      <input id="repTitle" placeholder="Título" />
      <input id="repAuthor" placeholder="Autor (auto)" />
    </div>
    <div style="margin-top:8px"><textarea id="repDesc" placeholder="Descripción..."></textarea></div>
    <div style="margin-top:8px;display:flex;gap:8px"><button id="saveRep" class="btn">Guardar informe</button><button id="clearRep" class="btn-ghost">Limpiar</button></div>
    <div style="margin-top:12px"><strong>Últimos informes</strong><div id="reportsList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeR').onclick = ()=> closeExpanded();
    const templates = lsGet('templates', {}); document.getElementById('tplReport').value = templates.report || '';
    document.getElementById('repAuthor').value = STATE.currentUser ? STATE.currentUser.display : 'Invitado';
    document.getElementById('saveRep').onclick = saveReport;
    document.getElementById('clearRep').onclick = ()=>{ document.getElementById('repTitle').value=''; document.getElementById('repDesc').value=''; };
    loadReports();
  }
  function saveReport(){
    if(!can('create_report')){ modalAlert('Error', 'No tienes permiso para crear informes'); return; }
    const title = document.getElementById('repTitle').value.trim();
    const desc = document.getElementById('repDesc').value.trim();
    if(!title || !desc){ modalAlert('Error', 'Título y descripción obligatorios'); return; }
    const reports = lsGet('reports', []);
    const r = {id:uid('rep'), title, description:desc, author: STATE.currentUser?STATE.currentUser.display:'Invitado', created_at:now()};
    reports.unshift(r); lsSet('reports', reports);
    const templates = lsGet('templates', {}); templates.report = document.getElementById('tplReport').value; lsSet('templates', templates);
    pushLog(`Informe creado: ${title}`);
    loadReports();
  }
  function loadReports(){
    const list = document.getElementById('reportsList');
    if(!list) return;
    const reports = lsGet('reports', []);
    list.innerHTML = '';
    if(!reports.length){ list.innerHTML = '<div class="muted small">No hay informes</div>'; return; }
    reports.forEach(r=>{
      const it = document.createElement('div'); it.className='item';
      it.innerHTML = `<div style="flex:1"><div style="font-weight:700">${r.title}</div><div class="muted small">${r.description.slice(0,140)}</div></div>
        <div style="text-align:right"><div class="muted tiny">${new Date(r.created_at).toLocaleString()}</div><div style="margin-top:6px" class="muted tiny">${r.author||''}</div></div>`;
      const btns = document.createElement('div'); btns.style.marginLeft='12px';
      const view = document.createElement('button'); view.className='btn-ghost btn-small'; view.textContent='Ver';
      view.onclick = ()=> modalAlert(`Informe — ${r.title}`, `${r.description}\n\nAutor: ${r.author}\nFecha: ${new Date(r.created_at).toLocaleString()}`);
      btns.appendChild(view);
      if(STATE.currentUser && (STATE.currentUser.role==='admin' || STATE.currentUser.display===r.author || STATE.currentUser.role==='comisario')){
        const del = document.createElement('button'); del.className='btn-small'; del.style.marginLeft='6px'; del.textContent='Borrar';
        del.onclick = ()=>{ if(confirm('Borrar informe?')){ deleteReport(r.id); } };
        btns.appendChild(del);
      }
      it.appendChild(btns);
      list.appendChild(it);
    });
  }
  function deleteReport(id){
    let reps = lsGet('reports', []);
    reps = reps.filter(r=>r.id!==id); lsSet('reports', reps); pushLog(`Informe ${id} borrado`); loadReports();
  }

  /* ---------- Wanted / BOLO ---------- */
  function renderWanted(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>BOLO / Wanted</strong><div class="muted small">Crear y gestionar fichas buscadas</div></div>
      <div><button class="btn btn-small" id="closeW">Cerrar</button></div>
    </div>
    <div style="margin-top:12px" class="form-row">
      <input id="wName" placeholder="Nombre / Alias" />
      <input id="wBounty" placeholder="Recompensa" />
    </div>
    <div style="margin-top:8px"><textarea id="wDesc" placeholder="Descripción"></textarea></div>
    <div style="margin-top:8px;display:flex;gap:8px"><button id="saveW" class="btn">Crear ficha</button></div>
    <div style="margin-top:12px"><strong>Fichas</strong><div id="wantedList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeW').onclick = ()=> closeExpanded();
    container.querySelector('#saveW').onclick = createWanted;
    loadWanted();
  }
  function createWanted(){
    if(!can('create_bolo')){ modalAlert('Error','No tienes permiso'); return; }
    const name = document.getElementById('wName').value.trim();
    const desc = document.getElementById('wDesc').value.trim();
    const bounty = parseInt(document.getElementById('wBounty').value.trim()||'0',10);
    if(!name){ modalAlert('Error','Nombre requerido'); return; }
    const arr = lsGet('wanted', []);
    const w = {id:uid('w'), name, description:desc, bounty, created_at:now()};
    arr.unshift(w); lsSet('wanted', arr); pushLog(`Wanted creado: ${name}`);
    document.getElementById('wName').value=''; document.getElementById('wDesc').value=''; document.getElementById('wBounty').value='';
    loadWanted();
  }
  function loadWanted(){
    const list = document.getElementById('wantedList'); if(!list) return;
    const arr = lsGet('wanted', []);
    list.innerHTML = '';
    if(!arr.length){ list.innerHTML = '<div class="muted small">No hay fichas</div>'; return; }
    arr.forEach(w=>{
      const it = document.createElement('div'); it.className='item';
      it.innerHTML = `<div style="flex:1"><div style="font-weight:700">${w.name}</div><div class="muted small">${w.description}</div></div><div class="pill">${w.bounty||0}€</div>`;
      const btns = document.createElement('div'); btns.style.marginLeft='12px';
      const view = document.createElement('button'); view.className='btn-ghost btn-small'; view.textContent='Ver'; view.onclick=()=> modalAlert(`Wanted — ${w.name}`, `${w.description}\nRecompensa: ${w.bounty}€`);
      btns.appendChild(view);
      if(can('manage_wanted')){
        const del = document.createElement('button'); del.className='btn-small'; del.style.marginLeft='6px'; del.textContent='Borrar'; del.onclick=()=>{ if(confirm('Borrar ficha?')){ deleteWanted(w.id); } };
        btns.appendChild(del);
      }
      it.appendChild(btns);
      list.appendChild(it);
    });
  }
  function deleteWanted(id){ let arr=lsGet('wanted',[]); arr=arr.filter(w=>w.id!==id); lsSet('wanted',arr); pushLog(`Wanted ${id} borrado`); loadWanted(); }

  /* ---------- Fines (Multas) ---------- */
  function renderFines(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Multas</strong><div class="muted small">Genera sanciones y multas</div></div>
      <div><button class="btn btn-small" id="closeF">Cerrar</button></div>
    </div>
    <div style="margin-top:12px" class="form-row"><input id="fineOff" placeholder="Infractor (nombre/vehículo)"/><input id="fineAmt" placeholder="Importe"/></div>
    <div style="margin-top:8px"><textarea id="fineReason" placeholder="Motivo..."></textarea></div>
    <div style="margin-top:8px;display:flex;gap:8px"><button id="saveFine" class="btn">Emitir multa</button></div>
    <div style="margin-top:12px"><strong>Multas</strong><div id="finesList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeF').onclick = ()=> closeExpanded();
    container.querySelector('#saveFine').onclick = saveFine;
    loadFines();
  }
  function saveFine(){
    if(!can('create_fine')){ modalAlert('Error','No tienes permiso para multar'); return; }
    const off = document.getElementById('fineOff').value.trim();
    const amt = parseInt(document.getElementById('fineAmt').value.trim()||'0',10);
    const reason = document.getElementById('fineReason').value.trim();
    if(!off || !amt){ modalAlert('Error','Infractor e importe requeridos'); return; }
    const arr = lsGet('fines', []);
    const f = {id:uid('f'), offender:off, amount:amt, reason, author: STATE.currentUser?STATE.currentUser.display:'Invitado', created_at:now()};
    arr.unshift(f); lsSet('fines', arr); pushLog(`Multa creada: ${off} ${amt}€`);
    loadFines();
    document.getElementById('fineOff').value=''; document.getElementById('fineAmt').value=''; document.getElementById('fineReason').value='';
  }
  function loadFines(){
    const list = document.getElementById('finesList'); if(!list) return;
    const arr = lsGet('fines', []);
    list.innerHTML = '';
    if(!arr.length){ list.innerHTML = '<div class="muted small">No hay multas</div>'; return; }
    arr.forEach(f=>{
      const it = document.createElement('div'); it.className='item';
      it.innerHTML = `<div style="flex:1"><div style="font-weight:700">${f.offender} • ${f.amount}€</div><div class="muted small">${f.reason}</div></div><div class="muted tiny">${new Date(f.created_at).toLocaleString()}</div>`;
      const btns = document.createElement('div'); btns.style.marginLeft='12px';
      if(STATE.currentUser && (STATE.currentUser.role==='admin' || STATE.currentUser.display===f.author || STATE.currentUser.role==='comisario')){
        const del = document.createElement('button'); del.className='btn-small'; del.textContent='Borrar'; del.onclick=()=>{ if(confirm('Borrar multa?')){ deleteFine(f.id); } };
        btns.appendChild(del);
      }
      it.appendChild(btns);
      list.appendChild(it);
    });
  }
  function deleteFine(id){ let arr = lsGet('fines', []); arr = arr.filter(x=>x.id!==id); lsSet('fines', arr); pushLog(`Multa ${id} borrada`); loadFines(); }

  /* ---------- Service (On Duty) ---------- */
  function renderService(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Servicio</strong><div class="muted small">Ponte en servicio o sal</div></div>
      <div><button class="btn btn-small" id="closeS">Cerrar</button></div>
    </div>
    <div style="margin-top:12px;display:flex;gap:8px;align-items:center">
      <div class="muted small">Tu estado:</div><div id="serviceBox" class="pill">Desconocido</div>
      <div style="margin-left:auto"><button id="toggleDuty" class="btn">Cambiar estado</button></div>
    </div>
    <div style="margin-top:12px"><strong>Policías en servicio</strong><div id="dutyList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeS').onclick = ()=> closeExpanded();
    const box = container.querySelector('#serviceBox');
    const on = lsGet('onDuty', {});
    const uId = STATE.currentUser ? STATE.currentUser.id : null;
    box.textContent = (uId && on[uId]) ? 'En servicio' : 'Fuera de servicio';
    container.querySelector('#toggleDuty').onclick = ()=>{
      if(!STATE.currentUser){ modalAlert('Error','Inicia sesión'); return; }
      const map = lsGet('onDuty', {});
      map[STATE.currentUser.id] = !map[STATE.currentUser.id];
      lsSet('onDuty', map);
      box.textContent = map[STATE.currentUser.id] ? 'En servicio' : 'Fuera de servicio';
      renderLogsMini();
      pushLog(`${STATE.currentUser.display} ${map[STATE.currentUser.id] ? 'entró' : 'salió'} de servicio`);
      loadDutyList();
    };
    loadDutyList();
  }
  function loadDutyList(){
    const list = document.getElementById('dutyList'); if(!list) return;
    const on = lsGet('onDuty', {}); const users = lsGet('users', []);
    const active = Object.keys(on).filter(k=>on[k]).map(id=> users.find(u=>u.id===id)?.display || id);
    list.innerHTML = active.map(a=>`<div class="item">${a}</div>`).join('') || '<div class="muted small">Nadie en servicio</div>';
    dutyStatus.textContent = `En servicio: ${active.length}`;
  }

  /* ---------- Admin panel (users & roles) ---------- */
  function renderAdmin(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Administración</strong><div class="muted small">Gestiona usuarios y roles</div></div>
      <div><button class="btn btn-small" id="closeA">Cerrar</button></div>
    </div>
    <div style="margin-top:12px;display:flex;gap:8px">
      <input id="newUser" placeholder="username"/>
      <input id="newDisplay" placeholder="display"/>
      <input id="newPass" placeholder="password"/>
      <select id="newRole"><option>officer</option><option>sergeant</option><option>dispatcher</option><option>admin</option></select>
      <button id="createUserBtn" class="btn">Crear</button>
    </div>
    <div style="margin-top:12px"><strong>Usuarios</strong><div id="usersList" class="list" style="margin-top:8px"></div></div>`;
    container.querySelector('#closeA').onclick = ()=> closeExpanded();
    container.querySelector('#createUserBtn').onclick = createUserAdmin;
    loadUsersList();
  }
  function createUserAdmin(){
    if(!can('manage_users')){ modalAlert('Error','Solo admins pueden crear usuarios'); return; }
    const username = document.getElementById('newUser').value.trim();
    const display = document.getElementById('newDisplay').value.trim() || username;
    const password = document.getElementById('newPass').value.trim() || '1234';
    const role = document.getElementById('newRole').value;
    if(!username){ modalAlert('Error','username requerido'); return; }
    const users = lsGet('users', []);
    if(users.find(u=>u.username===username)){ modalAlert('Error','Usuario ya existe'); return; }
    const u = {id:uid('u'), username, display, badge:'', password, role};
    users.unshift(u); lsSet('users', users); pushLog(`Usuario creado: ${username} (${role})`);
    document.getElementById('newUser').value=''; document.getElementById('newDisplay').value=''; document.getElementById('newPass').value='';
    loadUsersList();
  }
  function loadUsersList(){
    const ul = document.getElementById('usersList');
    const users = lsGet('users', []);
    ul.innerHTML = '';
    if(!users.length){ ul.innerHTML = '<div class="muted small">No hay usuarios</div>'; return; }
    users.forEach(u=>{
      const it = document.createElement('div'); it.className='item';
      it.innerHTML = `<div><div style="font-weight:700">${u.display} (${u.username})</div><div class="muted small">${u.badge || ''}</div></div>
        <div style="text-align:right">
          <select class="roleSel" data-id="${u.id}"><option value="officer">officer</option><option value="sergeant">sergeant</option><option value="dispatcher">dispatcher</option><option value="admin">admin</option></select>
          <div style="margin-top:6px"><button class="btn-ghost btn-small" data-id="${u.id}" data-act="del">Borrar</button></div>
        </div>`;
      ul.appendChild(it);
      it.querySelector('.roleSel').value = u.role;
      it.querySelector('.roleSel').onchange = (e)=>{ changeRole(u.id, e.target.value); };
      it.querySelector('button[data-act="del"]').onclick = ()=>{ if(confirm('Borrar usuario?')){ deleteUser(u.id); } };
    });
  }
  function changeRole(id, role){
    if(!can('manage_users')){ modalAlert('Error','No autorizado'); return; }
    const users = lsGet('users', []);
    const u = users.find(x=>x.id===id); if(!u) return;
    u.role = role; lsSet('users', users); pushLog(`Rol cambiado: ${u.username} -> ${role}`); loadUsersList();
  }
  function deleteUser(id){
    if(!can('manage_users')){ modalAlert('Error','No autorizado'); return; }
    let users = lsGet('users', []);
    const user = users.find(u=>u.id===id);
    if(user && user.username==='admin'){ modalAlert('Error','No puedes borrar admin seed'); return; }
    users = users.filter(u=>u.id!==id); lsSet('users', users); pushLog(`Usuario borrado: ${id}`); loadUsersList();
  }

  /* ---------- Logs ---------- */
  function renderLogs(container){
    if(!container){
      expandedRoot.innerHTML = ''; const panel = document.createElement('div'); panel.className='expanded fade-in'; renderLogs(panel); expandedRoot.appendChild(panel); return;
    }
    const logs = lsGet('logs', []);
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Auditoría / Logs</strong><div class="muted small">Últimas acciones</div></div>
      <div><button class="btn btn-small" id="closeL">Cerrar</button></div>
    </div>
    <div style="margin-top:12px" id="logsList" class="list"></div>`;
    container.querySelector('#closeL').onclick = ()=> closeExpanded();
    const list = container.querySelector('#logsList'); list.innerHTML = '';
    if(!logs.length){ list.innerHTML = '<div class="muted small">Sin logs</div>'; return; }
    logs.slice(0,200).forEach(l=>{ const it = document.createElement('div'); it.className='item'; it.innerHTML = `<div><div style="font-weight:700">${l.msg}</div><div class="muted small">${new Date(l.t).toLocaleString()}</div></div>`; list.appendChild(it); });
  }
  function renderLogsMini(){
    const onMap = lsGet('onDuty', {});
    const users = lsGet('users', []);
    const active = Object.keys(onMap).filter(k=>onMap[k]).map(id=> users.find(u=>u.id===id)?.display || id);
    dutyStatus.textContent = `En servicio: ${active.length}`;
    userDisplay.textContent = STATE.currentUser ? `${STATE.currentUser.display} (${STATE.currentUser.role})` : 'No conectado';
  }

  /* ---------- Tools (Export/Import/Clear) ---------- */
  function renderTools(container){
    container.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center">
      <div><strong>Herramientas</strong><div class="muted small">Exportar / Importar datos</div></div>
      <div><button class="btn btn-small" id="closeT">Cerrar</button></div>
    </div>
    <div style="margin-top:12px;display:flex;gap:8px">
      <button id="doExport" class="btn">Exportar JSON</button>
      <button id="doImport" class="btn-ghost">Importar (JSON)</button>
      <button id="doClear" class="btn-ghost">Borrar todo</button>
    </div>
    <div style="margin-top:12px" class="muted small">Exporta informes, wanted, calls, fines, users y templates.</div>
    <input id="importFile" type="file" style="display:none" accept=".json" />`;
    container.querySelector('#closeT').onclick = ()=> closeExpanded();
    container.querySelector('#doExport').onclick = exportAll;
    container.querySelector('#doImport').onclick = ()=> document.getElementById('importFile').click();
    container.querySelector('#doClear').onclick = ()=>{ if(confirm('Borrar todos los datos locales?')){ localStorage.clear(); location.reload(); } };
    document.getElementById('importFile').onchange = importFile;
  }
  function exportAll(){
    if(!can('export')){ modalAlert('Error','No tienes permiso para exportar'); return; }
    const data = {
      users: lsGet('users',[]),
      reports: lsGet('reports',[]),
      wanted: lsGet('wanted',[]),
      calls: lsGet('calls',[]),
      fines: lsGet('fines',[]),
      templates: lsGet('templates',{}),
      logs: lsGet('logs',[])
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {type:'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = 'pda_export_'+Date.now()+'.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    pushLog('Exportado datos');
  }
  function importFile(e){
    const f = e.target.files[0]; if(!f) return;
    const reader = new FileReader();
    reader.onload = (ev)=>{
      try{
        const data = JSON.parse(ev.target.result);
        if(confirm('Importar reemplazará conjuntos existentes. Continuar?')){
          if(data.users) lsSet('users', data.users);
          if(data.reports) lsSet('reports', data.reports);
          if(data.wanted) lsSet('wanted', data.wanted);
          if(data.calls) lsSet('calls', data.calls);
          if(data.fines) lsSet('fines', data.fines);
          if(data.templates) lsSet('templates', data.templates);
          pushLog('Datos importados desde archivo');
          alert('Importación completa. Recargando UI.');
          location.reload();
        }
      }catch(err){ alert('JSON inválido'); }
    };
    reader.readAsText(f);
  }

  /* ---------- Login/Register logic (TU sistema original) ---------- */
  document.getElementById('btnLogin').onclick = ()=> openLoginModal();
  document.getElementById('btnExport').onclick = ()=> { if(can('export')) exportAll(); else modalAlert('Error','No autorizado'); };

  function openLoginModal(){ loginModal.style.display='flex'; document.getElementById('loginUser').focus(); }
  function closeLoginModal(){ loginModal.style.display='none'; document.getElementById('loginPass').value=''; document.getElementById('loginUser').value=''; document.getElementById('loginError').style.display='none'; }

  document.getElementById('guestBtn').onclick = ()=> { STATE.currentUser = null; lsSet('currentUser', null); updateHeader(); closeLoginModal(); pushLog('Entró como invitado'); };
  document.getElementById('showReg').onclick = ()=> { const b = document.getElementById('registerBlock'); b.style.display = b.style.display==='none' ? 'block' : 'none'; };
  document.getElementById('regCancel').onclick = ()=> { document.getElementById('registerBlock').style.display='none'; };

  document.getElementById('loginBtn').onclick = ()=>{
    const u = document.getElementById('loginUser').value.trim();
    const p = document.getElementById('loginPass').value.trim();
    const users = lsGet('users', []);
    const found = users.find(x=>x.username === u && x.password === p);
    if(found){
      STATE.currentUser = {...found}; lsSet('currentUser', STATE.currentUser); updateHeader(); closeLoginModal(); pushLog(`Sesión iniciada: ${found.username}`); modalAlert('OK','Sesión iniciada: ' + found.display);
    } else {
      document.getElementById('loginError').style.display='block'; document.getElementById('loginError').textContent='Usuario o contraseña incorrectos';
    }
  };

  document.getElementById('regCreate').onclick = ()=>{
    const username = document.getElementById('regUser').value.trim();
    const display = document.getElementById('regName').value.trim() || username;
    const pass = document.getElementById('regPass').value.trim() || '1234';
    const role = document.getElementById('regRole').value;
    if(!username){ document.getElementById('regMsg').textContent='Usuario requerido'; return; }
    const users = lsGet('users', []);
    if(users.find(u=>u.username===username)){ document.getElementById('regMsg').textContent='Usuario ya existe'; return; }
    const u = {id:uid('u'), username, display, badge:'', password:pass, role};
    users.unshift(u); lsSet('users', users); document.getElementById('regMsg').textContent='Cuenta creada. Inicia sesión.'; pushLog(`Cuenta creada: ${username}`);
    document.getElementById('regUser').value=''; document.getElementById('regName').value=''; document.getElementById('regPass').value='';
  };

  /* ---------- Auxiliary UI helpers ---------- */
  function closeExpanded(){ STATE.expanded=null; expandedRoot.innerHTML=''; window.scrollTo({top:0,behavior:'smooth'}); }
  function modalAlert(title, msg){ alert(title + "\n\n" + msg); }
  function updateHeader(){
    STATE.currentUser = lsGet('currentUser', STATE.currentUser);
    renderLogsMini();
  }

  /* login button toggle (header) */
  btnLogin.addEventListener('click', ()=>{
    if(STATE.currentUser){ if(confirm('Cerrar sesión?')){ lsSet('currentUser', null); STATE.currentUser=null; updateHeader(); pushLog('Sesión cerrada'); } } else openLoginModal();
  });

  /* ---------- Init + render ---------- */
  function initUI(){
    seedIfNeeded();
    STATE.currentUser = lsGet('currentUser', STATE.currentUser);
    renderCards();
    updateHeader();
    renderLogsMini();
  }
  initUI();

  </script>
  </body>
  </html>
